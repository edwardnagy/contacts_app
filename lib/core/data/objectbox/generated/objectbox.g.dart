// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../../core/data/objectbox/entity/address_entity.dart';
import '../../../../core/data/objectbox/entity/contact_entity.dart';
import '../../../../core/data/objectbox/entity/contact_metadata_entity.dart';
import '../../../../core/data/objectbox/entity/phone_number_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7521189316911485803),
      name: 'ContactEntity',
      lastPropertyId: const obx_int.IdUid(4, 5316875287635104439),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1346514920503346220),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1761187860787511459),
            name: 'guid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 2606047642500015082)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1931314122387313887),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5316875287635104439),
            name: 'lastName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 7176611943428073368),
            name: 'phoneNumbers',
            targetId: const obx_int.IdUid(3, 1984700867104012091)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 1355718045127097216),
            name: 'addresses',
            targetId: const obx_int.IdUid(4, 6758612215413192640))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7371513502107179609),
      name: 'ContactMetadataEntity',
      lastPropertyId: const obx_int.IdUid(3, 1470929398908579061),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 968399917511384181),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1470929398908579061),
            name: 'isInitialContactsAdded',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1984700867104012091),
      name: 'PhoneNumberEntity',
      lastPropertyId: const obx_int.IdUid(4, 4717930861149914361),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7880891974887125921),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2391754171256144948),
            name: 'number',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2764702351163261363),
            name: 'label',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4717930861149914361),
            name: 'contactId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 4736277139240099117),
            relationTarget: 'ContactEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6758612215413192640),
      name: 'AddressEntity',
      lastPropertyId: const obx_int.IdUid(8, 8808094872960439186),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6154728790825282548),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 778169650754186758),
            name: 'street1',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7951067739304252348),
            name: 'street2',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 324944640781491467),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5230611026183759697),
            name: 'state',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 460476878231028389),
            name: 'zipCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6314959032402832386),
            name: 'label',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8808094872960439186),
            name: 'contactId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 2420888549001106771),
            relationTarget: 'ContactEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 6758612215413192640),
      lastIndexId: const obx_int.IdUid(3, 2420888549001106771),
      lastRelationId: const obx_int.IdUid(2, 1355718045127097216),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [2327862832452500250],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ContactEntity: obx_int.EntityDefinition<ContactEntity>(
        model: _entities[0],
        toOneRelations: (ContactEntity object) => [],
        toManyRelations: (ContactEntity object) => {
              obx_int.RelInfo<ContactEntity>.toMany(1, object.id):
                  object.phoneNumbers,
              obx_int.RelInfo<ContactEntity>.toMany(2, object.id):
                  object.addresses
            },
        getId: (ContactEntity object) => object.id,
        setId: (ContactEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ContactEntity object, fb.Builder fbb) {
          final guidOffset = fbb.writeString(object.guid);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, guidOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, lastNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final guidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = ContactEntity(
              guid: guidParam,
              firstName: firstNameParam,
              lastName: lastNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<ContactEntity>(
              object.phoneNumbers,
              store,
              obx_int.RelInfo<ContactEntity>.toMany(1, object.id));
          obx_int.InternalToManyAccess.setRelInfo<ContactEntity>(
              object.addresses,
              store,
              obx_int.RelInfo<ContactEntity>.toMany(2, object.id));
          return object;
        }),
    ContactMetadataEntity: obx_int.EntityDefinition<ContactMetadataEntity>(
        model: _entities[1],
        toOneRelations: (ContactMetadataEntity object) => [],
        toManyRelations: (ContactMetadataEntity object) => {},
        getId: (ContactMetadataEntity object) => object.id,
        setId: (ContactMetadataEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ContactMetadataEntity object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addBool(2, object.isInitialContactsAdded);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final isInitialContactsAddedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final object = ContactMetadataEntity(
              isInitialContactsAdded: isInitialContactsAddedParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    PhoneNumberEntity: obx_int.EntityDefinition<PhoneNumberEntity>(
        model: _entities[2],
        toOneRelations: (PhoneNumberEntity object) => [object.contact],
        toManyRelations: (PhoneNumberEntity object) => {},
        getId: (PhoneNumberEntity object) => object.id,
        setId: (PhoneNumberEntity object, int id) {
          object.id = id;
        },
        objectToFB: (PhoneNumberEntity object, fb.Builder fbb) {
          final numberOffset = fbb.writeString(object.number);
          final labelOffset = fbb.writeString(object.label);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, numberOffset);
          fbb.addOffset(2, labelOffset);
          fbb.addInt64(3, object.contact.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final numberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final labelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = PhoneNumberEntity(
              number: numberParam, label: labelParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.contact.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.contact.attach(store);
          return object;
        }),
    AddressEntity: obx_int.EntityDefinition<AddressEntity>(
        model: _entities[3],
        toOneRelations: (AddressEntity object) => [object.contact],
        toManyRelations: (AddressEntity object) => {},
        getId: (AddressEntity object) => object.id,
        setId: (AddressEntity object, int id) {
          object.id = id;
        },
        objectToFB: (AddressEntity object, fb.Builder fbb) {
          final street1Offset =
              object.street1 == null ? null : fbb.writeString(object.street1!);
          final street2Offset =
              object.street2 == null ? null : fbb.writeString(object.street2!);
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          final zipCodeOffset =
              object.zipCode == null ? null : fbb.writeString(object.zipCode!);
          final labelOffset = fbb.writeString(object.label);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, street1Offset);
          fbb.addOffset(2, street2Offset);
          fbb.addOffset(3, cityOffset);
          fbb.addOffset(4, stateOffset);
          fbb.addOffset(5, zipCodeOffset);
          fbb.addOffset(6, labelOffset);
          fbb.addInt64(7, object.contact.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final street1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final street2Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final stateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final zipCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final labelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final object = AddressEntity(
              street1: street1Param,
              street2: street2Param,
              city: cityParam,
              state: stateParam,
              zipCode: zipCodeParam,
              label: labelParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.contact.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.contact.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ContactEntity] entity fields to define ObjectBox queries.
class ContactEntity_ {
  /// See [ContactEntity.id].
  static final id =
      obx.QueryIntegerProperty<ContactEntity>(_entities[0].properties[0]);

  /// See [ContactEntity.guid].
  static final guid =
      obx.QueryStringProperty<ContactEntity>(_entities[0].properties[1]);

  /// See [ContactEntity.firstName].
  static final firstName =
      obx.QueryStringProperty<ContactEntity>(_entities[0].properties[2]);

  /// See [ContactEntity.lastName].
  static final lastName =
      obx.QueryStringProperty<ContactEntity>(_entities[0].properties[3]);

  /// see [ContactEntity.phoneNumbers]
  static final phoneNumbers =
      obx.QueryRelationToMany<ContactEntity, PhoneNumberEntity>(
          _entities[0].relations[0]);

  /// see [ContactEntity.addresses]
  static final addresses =
      obx.QueryRelationToMany<ContactEntity, AddressEntity>(
          _entities[0].relations[1]);
}

/// [ContactMetadataEntity] entity fields to define ObjectBox queries.
class ContactMetadataEntity_ {
  /// See [ContactMetadataEntity.id].
  static final id = obx.QueryIntegerProperty<ContactMetadataEntity>(
      _entities[1].properties[0]);

  /// See [ContactMetadataEntity.isInitialContactsAdded].
  static final isInitialContactsAdded =
      obx.QueryBooleanProperty<ContactMetadataEntity>(
          _entities[1].properties[1]);
}

/// [PhoneNumberEntity] entity fields to define ObjectBox queries.
class PhoneNumberEntity_ {
  /// See [PhoneNumberEntity.id].
  static final id =
      obx.QueryIntegerProperty<PhoneNumberEntity>(_entities[2].properties[0]);

  /// See [PhoneNumberEntity.number].
  static final number =
      obx.QueryStringProperty<PhoneNumberEntity>(_entities[2].properties[1]);

  /// See [PhoneNumberEntity.label].
  static final label =
      obx.QueryStringProperty<PhoneNumberEntity>(_entities[2].properties[2]);

  /// See [PhoneNumberEntity.contact].
  static final contact =
      obx.QueryRelationToOne<PhoneNumberEntity, ContactEntity>(
          _entities[2].properties[3]);
}

/// [AddressEntity] entity fields to define ObjectBox queries.
class AddressEntity_ {
  /// See [AddressEntity.id].
  static final id =
      obx.QueryIntegerProperty<AddressEntity>(_entities[3].properties[0]);

  /// See [AddressEntity.street1].
  static final street1 =
      obx.QueryStringProperty<AddressEntity>(_entities[3].properties[1]);

  /// See [AddressEntity.street2].
  static final street2 =
      obx.QueryStringProperty<AddressEntity>(_entities[3].properties[2]);

  /// See [AddressEntity.city].
  static final city =
      obx.QueryStringProperty<AddressEntity>(_entities[3].properties[3]);

  /// See [AddressEntity.state].
  static final state =
      obx.QueryStringProperty<AddressEntity>(_entities[3].properties[4]);

  /// See [AddressEntity.zipCode].
  static final zipCode =
      obx.QueryStringProperty<AddressEntity>(_entities[3].properties[5]);

  /// See [AddressEntity.label].
  static final label =
      obx.QueryStringProperty<AddressEntity>(_entities[3].properties[6]);

  /// See [AddressEntity.contact].
  static final contact = obx.QueryRelationToOne<AddressEntity, ContactEntity>(
      _entities[3].properties[7]);
}
